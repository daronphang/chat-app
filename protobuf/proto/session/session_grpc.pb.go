// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/session/session.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	common "protobuf/proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	Heartbeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.MessageResponse, error)
	ClientHeartbeat(ctx context.Context, in *UserSession, opts ...grpc.CallOption) (*common.MessageResponse, error)
	BroadcastUserPresenceEvent(ctx context.Context, in *UserPresence, opts ...grpc.CallOption) (*common.MessageResponse, error)
	BroadcastMessageEvent(ctx context.Context, in *common.Message, opts ...grpc.CallOption) (*common.MessageResponse, error)
	BroadcastChannelEvent(ctx context.Context, in *common.Channel, opts ...grpc.CallOption) (*common.MessageResponse, error)
	GetOnlineUsers(ctx context.Context, in *UserIds, opts ...grpc.CallOption) (*UserIds, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Heartbeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/session.Session/heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) ClientHeartbeat(ctx context.Context, in *UserSession, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/session.Session/clientHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) BroadcastUserPresenceEvent(ctx context.Context, in *UserPresence, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/session.Session/broadcastUserPresenceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) BroadcastMessageEvent(ctx context.Context, in *common.Message, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/session.Session/broadcastMessageEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) BroadcastChannelEvent(ctx context.Context, in *common.Channel, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/session.Session/broadcastChannelEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetOnlineUsers(ctx context.Context, in *UserIds, opts ...grpc.CallOption) (*UserIds, error) {
	out := new(UserIds)
	err := c.cc.Invoke(ctx, "/session.Session/getOnlineUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility
type SessionServer interface {
	Heartbeat(context.Context, *emptypb.Empty) (*common.MessageResponse, error)
	ClientHeartbeat(context.Context, *UserSession) (*common.MessageResponse, error)
	BroadcastUserPresenceEvent(context.Context, *UserPresence) (*common.MessageResponse, error)
	BroadcastMessageEvent(context.Context, *common.Message) (*common.MessageResponse, error)
	BroadcastChannelEvent(context.Context, *common.Channel) (*common.MessageResponse, error)
	GetOnlineUsers(context.Context, *UserIds) (*UserIds, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (UnimplementedSessionServer) Heartbeat(context.Context, *emptypb.Empty) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedSessionServer) ClientHeartbeat(context.Context, *UserSession) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientHeartbeat not implemented")
}
func (UnimplementedSessionServer) BroadcastUserPresenceEvent(context.Context, *UserPresence) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastUserPresenceEvent not implemented")
}
func (UnimplementedSessionServer) BroadcastMessageEvent(context.Context, *common.Message) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessageEvent not implemented")
}
func (UnimplementedSessionServer) BroadcastChannelEvent(context.Context, *common.Channel) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastChannelEvent not implemented")
}
func (UnimplementedSessionServer) GetOnlineUsers(context.Context, *UserIds) (*UserIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUsers not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Heartbeat(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_ClientHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).ClientHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/clientHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).ClientHeartbeat(ctx, req.(*UserSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_BroadcastUserPresenceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPresence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).BroadcastUserPresenceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/broadcastUserPresenceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).BroadcastUserPresenceEvent(ctx, req.(*UserPresence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_BroadcastMessageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).BroadcastMessageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/broadcastMessageEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).BroadcastMessageEvent(ctx, req.(*common.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_BroadcastChannelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).BroadcastChannelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/broadcastChannelEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).BroadcastChannelEvent(ctx, req.(*common.Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/getOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetOnlineUsers(ctx, req.(*UserIds))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartbeat",
			Handler:    _Session_Heartbeat_Handler,
		},
		{
			MethodName: "clientHeartbeat",
			Handler:    _Session_ClientHeartbeat_Handler,
		},
		{
			MethodName: "broadcastUserPresenceEvent",
			Handler:    _Session_BroadcastUserPresenceEvent_Handler,
		},
		{
			MethodName: "broadcastMessageEvent",
			Handler:    _Session_BroadcastMessageEvent_Handler,
		},
		{
			MethodName: "broadcastChannelEvent",
			Handler:    _Session_BroadcastChannelEvent_Handler,
		},
		{
			MethodName: "getOnlineUsers",
			Handler:    _Session_GetOnlineUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/session/session.proto",
}
